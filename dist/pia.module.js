/**!
 * Pia JS v0.0.4
 * @author phucbm
 * @homepage https://github.com/phucbm/pia
 * @license MIT 2023
 */
function e(e){return Date.parse("string"==typeof e?e:e.toString())}function n(n,t,r){return Math.floor(function(n,t){return e(t)-e(n)}(n,t)/function(e=""){const n=36e5,t={second:1e3,minute:6e4,hour:n,day:24*n,year:31536e6};return["year","day","hour","minute","second"].includes(e)?t[e]:t}(r))}function t(e){if(!e)return!0;return!["session","never"].includes(e.expires)&&function(e){const n=r(e);if(null===n)return!1;const t=e.expires;return n>t}(e)}function r(e,t=void 0){t=t||e.unit;return["ms","second","minute","hour","day"].includes(t)?n(new Date(e.createdDate),new Date,t):null}function o(e,n,t={}){const r={expires:"never",unit:"day",...t},o=function(e){return["hour","day"].includes(e)?e:(console.warn(`PiaJS: unit "${e}" is not recognized.`),!1)}(r.unit),s=function(e,n){if("string"==typeof e)return["session","tab","current-tab"].includes(e)?"session":"never";return"number"==typeof e&&parseInt(e)}(r.expires),u=function(e){return"session"===e?"sessionStorage":"localStorage"}(s);return{key:e,valueType:typeof n,value:n,expires:s,unit:o,storageType:u,arguments,createdDate:(new Date).toString()}}function s(e,n){const t=n.storageType,r=JSON.stringify(n);u(e)?.storageType!==t&&i(e),"sessionStorage"===t?sessionStorage.setItem(e,r):localStorage.setItem(e,r)}function u(e,n=!1){let r=localStorage.getItem(e);if(null===r&&(r=sessionStorage.getItem(e)),null===r)return r;const o=JSON.parse(r);return t(o)?(i(o.key,o.storageType),null):n?o:o.value}function i(e,n="localStorage"){"sessionStorage"===n?sessionStorage.removeItem(e):localStorage.removeItem(e)}window.Pia=new class{constructor(){}isExpired(e){return t(u(e))}update(e,n){if(!u(e))return void console.warn(`Updating undefined record "${e}" is not allowed.`);const t=u(e,!0);typeof n!==t.valueType&&console.warn(`Updating mismatched value types. Changing from ${t.valueType} to ${typeof n}.`),t.value=n,s(e,t)}set(e,n,t={}){s(e,o(e,n,t))}get(e,n=!1){return u(e,n)}remove(e){return i(e)}test(e,n=!1){const t=u(e,!0);let o;const s=[];return t?("number"==typeof t.expires?(s.push(`${t.expires-r(t)} ${t.unit}(s) left`),["second","minute","hour","day"].forEach((e=>{s.push(`created ${r(t,e)} ${e}(s) ago`)}))):s.push(t.expires),o={leftover:s,record:t}):o=`Record "${e}" not found.`,n&&(console.group("Test record:",e),console.table(s),console.log("record",t),console.groupEnd()),o}};